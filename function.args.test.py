# -*- coding: utf-8 -*-
# function.args.test.py

def bigger(a,b):
    if a > b:
        print(a)
    else:
       print(b)

# В описании функции указано, что она принимает 2 аргумента

bigger(5,6)

# Именованные аргументы

def a(b=4,c=5):
    print(b,c)

# При вызове указывать необязательно. Если не указаны, им присваиваются дефолтные значения.

a()

a(12,13)

# При работе программы значения именованным параметрам присваиваются один раз, в месте определения функции. 

a(b=15,c=16)
 
 
# Если присвоенный объект изменяемый, то измененный во время работы функции, он в следующих вызовах будет иметь не то, значение, которое указано как значение в определении функции, а то, которое было присвоено во время предыдущего вызова:

def am(b=[1]):
    b[0] += 1
    b.append(1)
    print(b)

am()
am()
am()

# Необязательные аргументы

# cfunc — функция с двумя необязательными аргументами

def cfunc(a, b, c=2): # c - необязательный аргумент
    return a + b + c



# Произвольное число аргументов:

def unknown(*args):
    for argument in args:
        print(argument)
 
unknown("hello","world") # напечатает оба слова, каждое с новой строки
unknown(1,2,3,4,5) # напечатает все числа, каждое с новой строки
unknown() # ничего не выведет

# Функция также может принимать переменное количество позиционных аргументов, тогда перед именем ставится *:

def ufunc(*args):
    return args

ufunc(1, 2, 3, 'abc')
ufunc()
ufunc(1)

# args - это кортеж из всех переданных аргументов функции, и с переменной можно работать также, как и с кортежем.

# Передача списка в функцию, как набора аргументов:
def al(*args):
    print(args)

al(1,2,3) # Переменное к-во аргументов
al([1,2,3]) # Список (передается как один аргумент)
al(*[1,2,3]) # Список со звездочкой (передается как переменное к-во аргументов)

# Произвольное количество именованных аргументов

# Определение функции с произвольным количество именованных аргументов:
def ka(**kwargs):
    print(kwargs)

ka()
ka(b=1,c=2)

# Передача словаря в функцию как произвольного количества именованных аргументов:
def kaa(**kwargs):
    print(kwargs)
  
d = {'k1':1,'k2':2} 
 
kaa(k1=d) # Словарь передан как один именованный аргумент.
kaa(**d) # Словарь передан как произвольное количество именованных аргументов.

# Все виды параметров вместе
def kka(b,c,*args,**kwargs):
    print(b,c,args,kwargs)
 
kka(1,2)
kka(1,2,3,4)
kka(1,2,5,6,d=8,e=9,f=10)
