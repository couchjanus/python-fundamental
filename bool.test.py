# -*- coding: utf-8 -*-
# bool.test.py

# & Побитовое И Побитовая операция И над числами 5 & 3 даёт 1.

# | Побитовое ИЛИ Побитовая операция ИЛИ над числами 5 | 3 даёт 7

# ^ Побитовое ИСКЛЮЧИТЕЛЬНО ИЛИ Побитовая операция ИСКЛЮЧИТЕЛЬНО ИЛИ 5 ^ 3 даёт 6

# ~ Побитовое НЕ Побитовая операция НЕ для числа x соответствует -(x+1) ~5 даёт -6.

def print_yes():
    print('yes')

print(bin(5))  #
print(bin(3))  #
print(bin(5 & 3))  #
print(5 & 3)  #


# Логического выражения и логический тип данных

# В программировании False обычно приравнивают к нулю, а True – к единице. 
# Чтобы в этом убедиться, можно преобразовать булево значение к целочисленному типу:

int(True)

int(False)

# Возможно и обратное. 
# Можно преобразовать какое-либо значение к булевому типу:

bool(3.4) # True
bool(-150) # True
bool(0) # False
bool(' ') # True
bool('') # False
# здесь работает правило: 
# всё, что не 0 и не пустота, является правдой.


# Логические операторы

# < Меньше Определяет, верно ли, что x меньше y. 
# Все операторы сравнения возвращают True или False. 
# Обратите внимание на заглавные буквы в этих словах.

5 < 3 #  False,

3 < 5 # True.

# Можно составлять произвольные цепочки сравнений: 3 < 5 < 7 даёт True.

# Больше
5 > 3 # True. 

# Меньше или равно 

x = 3; y = 6; x <= y # True

# Больше или равно 
x = 4; y = 3; x >= 3 # True

# == Равно 

x = 2; y = 2; x == y # True
x = 'str'; y = 'stR'; x == y # False
x = 'str'; y = 'str'; x == y # True

# != Не равно 
x = 2; y = 3; x != y # True

# Сложные логические выражения

x = 8
y = 13
y < 15 and x > 8 # False


y < 15 or x > 8 # True


# Отрицание превращает правду в ложь, а ложь в правду. Унарный он потому, что применяется к одному выражению, стоящему после него, а не справа и слева от него как в случае бинарных and и or.

not y < 15 # False
# Здесь у < 15 возвращает True. Отрицая это, мы получаем False.

a = 5
b = 0
not a # False
not b # True

# Число 5 трактуется как истина, отрицание истины дает ложь.
# Ноль приравнивается к False. 
# Отрицание False дает True.


# Краткая запись мат. операций и присваивания

# Зачастую результат проведения некой математической операции необходимо присвоить переменной, над которой эта операция производилась. Для этого существуют краткие формы записи выражений:

# Вы можете записать:

a = 2; a = a * 3
# в виде:
a = 2; a *= 3
