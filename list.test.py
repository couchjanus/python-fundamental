# -*- coding: utf-8 -*-
# list.test.py

my_empty_list = list()
my_empty_list = []


my_list = [1, 'some', 3.5]

print(my_list)

my_list = list(idx for idx in range(3))  # [0, 1, 2]

print(my_list)

# Создать список L
L=[3,1,5,'a','b','cd',2.5,5.5,7.5] 
print(L)

L[1] = 11  # 

# Срез, содержащий элементы с индексами 1-4
print(L[1:5]) 

# Срез, содержащий элементы от начала списка 
# до элемента с индексом 6
print(L[:7]) 

# Срез, содержащий элементы от элемента 
# с индексом 3 до конца списка
print(L[3:]) 

# Срез, содержащий каждый третий элемент списка
print(L[::3]) 

# Добавить элемент со значением 7 в конец списка
L.append(7) 
print(L)

# del — удаление по индексу:
del lst[1]
# При удалении нужно помнить о том, что нельзя одновременно делать итерацию по списку — последствия будут непредсказуемы.

# Удалить из списка элемент с индексом 0
del L[0]  #

del L[:2]
del L[:]


# remove() — удаление конкретного элемента:
lst.remove(100)

# Удалить элемент со значением 7
L.remove(7)
print(L)



# Удалить из списка элемент с индексом 5
L.pop(5) 
print(L)

# Элемент можно добавить в произвольную позицию списка с помощью метода insert:
lst.insert(0,'vocal')

# Вставить в позицию 3 списка элемент со значением 'c'
L.insert(3,'c') 
print(L)

# Извлечь из списка последний элемент
L[-1] 
print(L)

# Объединить списки list и [4,'f']
L.extend([4,'f']) 
print(L)

# extend() — аналогичен append(), добавляет последовательность элементов:
lst.extend([3,4])

# sort() — сортировка списка:

lst.sort()

# Отсортировать список по возрастанию
L.sort() 
print(L)

# reverse() — реверс списка:
lst.reverse()

# Отсортировать список по убыванию
L.reverse() 
print(L)

# Для проверки, является ли элемент членом списка, есть оператор in:
2 in lst

10 in lst


# index() — взять элемент списка по индексу:
lst.index('guitar')


# count() — подсчет числа повторов какого-то элемента:
lst.count('vocal')


L=[i for i in xrange(10)]
[i+1 for i in L]
L1=[['a','b','c'],[1,2,3],[1.5,2.5,3.5]]
L2=[row[1] for row in L1]
